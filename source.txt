:: StoryTitle
Story Title


:: StoryData
{
	"ifid": "5406BF44-CF93-41CF-9DED-9824A52E2F82",
	"format": "SugarCube",
	"format-version": "2.30.0",
	"start": "Start",
	"zoom": 1
}


:: Story Stylesheet [stylesheet]
html {
    font: 100% Georgia, serif;
}
body {
    color: white;
    background-color: black;
}
a {
    cursor: pointer;
    color: #68d;
    text-decoration: none;
    font-weight: bold;
    transition-duration: 200ms;
}
.description {
  color: yellow;
}


:: Story JavaScript [script]
/* twine-user-script #1: "0010-standard.js" */
/*
Establishes shorthand aliases for the following namespaces in
SugarCube: `setup`, `settings`, `State.variables`, and
`State.temporary`.

All classes and functions are built on the `s` namespace. All instances
are built on the `v` namespace.
*/

Object.defineProperty(window, "s", {
    get: function() {
        return setup;
    }
});

Object.defineProperty(window, "ss", {
    get: function() {
        return settings;
    }
});

Object.defineProperty(window, "v", {
    get: function() {
        return State.variables;
    }
});

Object.defineProperty(window, "t", {
    get: function() {
        return State.temporary;
    }
});

Config.passages.nobr = true; // sets all passages to `nobr`

window.onerror = function(msg, url, linenumber) {
    /*
    Ensures that errors appear in a pop-up for greater visibility. Works
    in Firefox, but doesn't seem to work in Safari. Be sure to do
    testing in Firefox.
    */
    alert(
        'Error message: ' + msg + '\n' +
        'URL: ' + url + '\n' +
        'Line Number: ' + linenumber
    );
    return true;
}
/* twine-user-script #2: "0020-List.js" */
s.List = function() {
    /*
    A wrapper around an array with methods for controlling manipulation
    and access of elements.
    */
    this._array = [];
    return this;
}

s.List.prototype._verify = function(obj) {
    /*
    Checks if `obj` qualifies to be in the list. Should be overwritten
    by subclasses.
    */
    return true;
}

s.List.prototype.push = function() {
    /*
    Takes any number of objects as parameters. If any given object
    fails the `_verify` test, throws an error. Otherwise, adds all
    objects to `_array` and returns the calling `List` object.
    */
    if (arguments.length > 0) {
        var args = Array.prototype.slice.call(arguments);
        var arg = args.shift();
        if (this._verify(arg)) {
            this._array.push(arg);
        } else {
            throw new Error(
                'List.push():\n' +
                'object does not qualify for list'
            );
        }
        this.push.apply(this, args);
    }
    return this;
}

s.List.prototype.delete = function(index) {
    /*
    Deletes the list element at the given index and returns the modified
    `List` object. Throws an error if index is out of range. Returns the
    calling `List` object.
    */
    if (index !== parseInt(index, 10) || index < 0 ||
        index >= this._array.length) {
        throw new Error(
            'List.delete():\n' +
            'invalid index'
        );
    }
    this._array.splice(index, 1);
    return this;
}

s.List.prototype.get = function(index) {
    return this._array[index];
}

s.List.prototype.indexOf = function(obj) {
    return this._array.indexOf(obj);
}

s.List.prototype.length = function() {
    return this._array.length;
}
/* twine-user-script #3: "0030-Outcome.js" */
s.Outcome = function(func) {
    /*
    Represents one possible result of a player action.

    @param {Function} func - The function to call when the outcome is
    carried out.
    */
    this._userScript = func;
    return this;
}

s.Outcome.prototype.carryOut = function() {
    return this._userScript();
}
/* twine-user-script #4: "0040-Action.js" */
s.Action = function(text, checkFunc, chooseFunc) {
    /*
    In a given passage, the reader will choose from a list of actions.
    Each action can be displayed as a link, and when it is selected,
    the story will choose from a list of that action's possible
    outcomes. An `Action` object represents one of these actions.

    Structurally, an action object is a list of outcomes with a display
    text for the link, and some additional methods available. As such,
    it is implemented as a subclass of `List`.

    @param {String} text - The text to appear in the link.
    @param {Function|Boolean} checkFunc (optional) - The function to
    call when checking if the action should be displayed. Should return
    a boolean. If a boolean is provided, simply returns that boolean.
    Defaults to true.
    @param {Function} chooseFunc (optional) - The function to call when
    choosing an outcome. Should return an outcome from the action. If
    not provided, the first outcome in the list will be chosen.
    @param {String} align (optional) - The CSS text-align value for the
    link associated with this action. Defaults to 'left'.
    */
    s.List.call(this);
    this._displayText = text;

    if (checkFunc === undefined || checkFunc === true)  {
        this._userScriptCheck = function() {
            return true;
        }
    } else if (checkFunc === false) {
        this._userScriptCheck = function() {
            return false;
        }
    } else {
        this._userScriptCheck = checkFunc;
    }
    if (typeof(checkFunc) === 'boolean') {
        checkFunc = function() {
            return checkFunc;
        }
    }

    this._userScriptChoose = chooseFunc || function() {
        if (this.length() > 0) {
            return this._array[0];
        } else {
            return null;
        }
    }
    this._align = 'left';
    return this;
};

s.Action.prototype = Object.create(s.List.prototype);

Object.defineProperty(s.Action.prototype, 'constructor', {
    value: s.Action,
    enumerable: false,
    writable: true
});

s.Action.prototype._verify = function(obj) {
    /*
    @override

    Members of an `Action` must be Outcome objects.
    */
    return (obj instanceof s.Outcome);
}

s.Action.prototype.getText = function() {
    return this._displayText;
}

s.Action.prototype.getAlign = function() {
    return this._align;
}

s.Action.prototype.setAlign = function(align) {
    this._align = align;
    return this;
}

s.Action.prototype.check = function() {
    return this._userScriptCheck();
}

s.Action.prototype.choose = function() {
    return this._userScriptChoose();
}
/* twine-user-script #5: "0050-Node.js" */
s.nodes = new Map(); // maps SugarCube `Passage` objects to associated
                     // `Node` objects

s.getNode = function(psgTitle) {
    /*
    Returns the Node object associate with the passage titled,
    `psgTitle`.
    */
    return s.nodes.get(Story.get(psgTitle));
}

s.specialPassages = [
    'PassageDone', 'PassageFooter', 'PassageHeader', 'PassageReady',
    'StoryAuthor', 'StoryBanner', 'StoryCaption', 'StoryInit',
    'StoryInterface', 'StoryMenu', 'StorySettings', 'StoryShare',
    'StorySubtitle', 'StoryTitle'
]

s.Node = function(psgTitle, subCount, func) {
    /*
    A `Node` object is like a wrapper around a passage. It contains the
    passage which holds the narrative description of the situation, as
    well as a list of possible actions for the reader to choose from.

    Structurally, a node is a list of actions with a passage for the
    narrative description, and some additional methods. As such, it is
    implemented as a subclass of `List`.

    The associated passage may have slots available for dynamically
    generated text substitutions. The node object has properties and
    methods for managing this. The `subCount` property should match the
    number of available text substitutions. It is there for a redundancy
    check to prevent the error of sending the wrong number of text
    substitutions when loading a node.

    Node objects, and their associated Action and Outcome objects,
    should be built on `s` so they are not stored in the player's local
    storage. As such, they will not be saved from session to session, so
    they should not be changed dynamically during gameplay.

    @param {String} psgTitle - The title of the associated passage.
    @param {Integer} subCount - The number of expected text
    substitutions. Defaults to 0.
    @param {Function} func (optional) - The function to call when the
    node is loaded. It runs immediately before the loading of the
    passage associated with the calling node. By default, it does
    nothing.

    @property passage - The SugarCube `Passage` object whose title is
    `psgTitle`
    */
    s.List.call(this);
    if (!Story.has(psgTitle)) {
        throw new Error(
            'Node():\n' +
            'there is no passage titled "' + psgTitle + '"'
        );
    }
    if (s.specialPassages.indexOf(psgTitle) >= 0) {
        throw new Error(
            'Node():\n' +
            'cannot assign a special passage other than `Start` to a node'
        );
    }
    var passage = Story.get(psgTitle);
    if (s.nodes.has(passage)) {
        throw new Error(
            'Node():\n' +
            'the passage "' + psgTitle + '" already belongs to a node'
        );
    }
    this._passage = passage;
    s.nodes.set(passage, this);
    this._subCount = subCount || 0;
    this._userScript = func || function() {
        return;
    }
    return this;
};

s.Node.prototype = Object.create(s.List.prototype);

Object.defineProperty(s.Node.prototype, 'constructor', {
    value: s.Node,
    enumerable: false,
    writable: true
});

s.Node.prototype._verify = function(obj) {
    /*
    @override

    Members of a `Node` must be actions that are registered with the
    factory.
    */
    return (obj instanceof s.Action);
}

s.Node.prototype.getPassage = function() {
    return this._passage;
}

s.Node.prototype.getSubCount = function() {
    return this._subCount;
}

s.Node.prototype.load = function() {
    this._userScript();
    Engine.play(this._passage.title);
}

s.Node.prototype.addLink = function(text, psgTitle, func) {
    /*
    Creates a new Outcome that runs the given function, then loads the
    node associated with the given passage title. Then adds that Outcome
    to a new Action with the given text as its link text. Then adds that
    Action to the node.

    If there is no node associated with the given passage title, one
    will be created.

    Returns the newly created action.
    */
    var targetNode = s.nodes.get(Story.get(psgTitle));
    if (targetNode === undefined) {
        targetNode = new s.Node(psgTitle);
    }

    var outcome;
    if (func === undefined) {
        outcome = new s.Outcome(function() {
            targetNode.load();
        });
    } else {
        outcome = new s.Outcome(function() {
            func();
            targetNode.load();
        });
    }

    var action = new s.Action(text).push(outcome);
    this.push(action);
    return action;
}

s.makeLink = function(startPsgTitle, text, endPsgTitle, func) {
    /*
    Calls the `addLink` method of the node associated with
    `startPsgTitle`, passing it the other parameters. If no such node
    exists, one is created.
    */
    var startNode = s.nodes.get(Story.get(startPsgTitle));
    if (startNode === undefined) {
        startNode = new s.Node(startPsgTitle);
    }

    return startNode.addLink(text, endPsgTitle, func);
}
/* twine-user-script #6: "0060-node-markup.js" */
/*
This file encodes the special text processing done by the node system on
the passage text. The text substitutions are stored in `v` so that they
are saved in SC's history. They should be set before the incoming node
is loaded.
*/

v.textSubs = [] // The array of text subs for the incoming node.

s.procTextSubContainers = function(psgTitle, psgText) {
    /*
    Replaces instances of `{<number>}` in the passage text with
    `v.textSubs[<number]`. Throws an error if any index is out of
    bounds, if any index is repeated, or if there are not enough
    indices. Returns the processed text.

    @param {String} psgTitle - The title of the passage being processed.
    @param {String} psgText - The text of the passage being processed.
    */
    var passage = Story.get(psgTitle);
    var psgId = passage.domId;

    var node = s.nodes.get(passage);
    var subCount = node.getSubCount();
    var subsFound = new Set();

    var regex = /\{(\d+?)\}/;

    var processedText = psgText;
    var result, index;
    while (true) {
        result = regex.exec(processedText);

        if (result === null) {
            if (subsFound.size < subCount) {
                throw new Error(
                    'too few text substitutions in passage, "' +
                    psgTitle + '"'
                );
            }

            return processedText;
        }

        index = parseInt(result[1], 10);

        if (index >= subCount) {
            throw new Error(
                'text substitution index out of range in passage, "' +
                psgTitle + '"'
            );
        }

        if (subsFound.has(index)) {
            throw new Error(
                'duplicate text substitution index in passage, "' +
                passage.title + '"'
            );
        }

        subsFound.add(index);
        processedText = (
            processedText.slice(0, result.index) +
            v.textSubs[index] +
            processedText.slice(result.index + result[0].length)
        );
    }
}

s.examine = function(description, id) {
    /*
    Inserts the given description into the element with the given id and
    clears all other elements with class `.description`. If the element
    with the given id already contains the given description, the
    function simply clears it.

    @param {String} description - the description to insert
    @param {String} id - the id of the containing element
    */
    var text = jQuery("#" + id).html();     // store the current content
                                            // for comparison

    jQuery(".description").empty()          // clear all elements

    jQuery("#" + id).wiki(description);     // insert the description

    if (text === jQuery("#" + id).html()) { // empty content if already
        jQuery("#" + id).empty();           // present
    }

    return;
}

s.procExamineLinks = function(psgTitle, psgText) {
    /*
    Replaces instances of `{text|id}` with links that reveal a
    description. The description is found in a corresponding instance of
    `{?id|description}` which is replaced by a div element into which
    the description appears. The appearance of the description is
    controlled by the function `s.examine()`.

    The text in the link markup cannot begin with a `?` and cannot
    contain a `|`. The id in the link markup must contain only letters,
    numbers, and `_`, and must begin with a letter.

    @param {String} psgTitle - The title of the passage being processed.
    @param {String} psgText - The text of the passage being processed.
    */
    var passage = Story.get(psgTitle);
    var psgId = passage.domId;

    var linkRegex = /\{(.+?)\|([a-zA-Z][0-9a-zA-Z_]*?)\}/;

    var processedText = psgText;

    var cut = [0,0,0,0];         // indices at which to cut the given
                                 // text

    var part = ['','','','','']; // substrings to concatenate in order
                                 // to build the new text

    var j;                       // temporary storage, used in building
                                 // `cut`

    var linkResult, linkText, linkId, elementId;
    var descRegex, descResult, descText, descLoc;
    while (true) {
        linkResult = linkRegex.exec(processedText);

        if (linkResult === null) {
            if (/\{\?([a-zA-Z][0-9a-zA-Z_]*?)\|(.+?)\}/.test(processedText)) {
                throw new Error(
                    'description markup without link markup in passage, "' +
                    psgTitle + '"'
                );
            }
            return processedText;
        }
        
        linkId = linkResult[2];
        descRegex = new RegExp(
            '\\{\\?' + linkId + '\\|(.+?)\\}'
        );
        descResult = descRegex.exec(processedText);

        if (descResult === null) {
            throw new Error(
                'link markup without description markup in passage, "' +
                psgTitle + '"'
            );
        }

        linkText = linkResult[1];
        descText = descResult[1];
        elementId = psgId + '-examine-' + linkId;

        j = linkResult.index < descResult.index ? 0 : 2;
        cut[j] = linkResult.index;
        cut[j+1] = linkResult.index + linkResult[0].length;
        cut[2-j] = descResult.index;
        cut[3-j] = descResult.index + descResult[0].length;

        part[0] = processedText.slice(0, cut[0]);
        part[2] = processedText.slice(cut[1], cut[2]);
        part[4] = processedText.slice(cut[3])

        part[j+1] = (
            '<<link "' + linkText + '">>' +
                '<<run s.examine(' + 
                    '"' + descText + '", "' + elementId + '"' +
                ')>>' +
            '<</link>>'
        );

        part[3-j] = (
            '<div id="' + elementId + '" class="description">' +
            '</div>'
        );

        processedText = part.join('');
    }
}

s.addNodeContainers = function(psgTitle, psgText) {
    /*
    Wraps the passage text in a `body` container; adds an `action`
    container for the action links; adds a `next` container in case the
    next node is to be loaded without a passage transition.
    */
    var passage = Story.get(psgTitle);
    return (
        '<div id="' + passage.domId + '-body">\n\n' +
            psgText + '\n\n' +
        '</div>\n\n' + 
        '<div id="' + passage.domId + '-actions"></div>\n\n' +
        '<div id="' + passage.domId + '-next"></div>'
    );
}

s.procNodeMarkup = function(psgTitle, psgText) {
    /*
    Processes the special node markup in the given passage. Does nothing
    if the given passage is not associated with a node. Returns the
    processed text.

    @param {String} psgTitle - The title of the passage being processed.
    @param {String} psgText - The text of the passage being processed.
    */
    var node = s.nodes.get(Story.get(psgTitle));
    if (node === undefined) {
        return psgText;
    }

    var processedText = psgText;
    processedText = s.procTextSubContainers(psgTitle, processedText);
    processedText = s.procExamineLinks(psgTitle, processedText);
    processedText = s.addNodeContainers(psgTitle, processedText);

    return processedText;
}

Config.passages.onProcess = function (p) {
    return s.procNodeMarkup(p.title, p.text);
};
/* twine-user-script #7: "0070-passagedisplay.js" */
/*
This file encodes the passage post-processing of the node system,
including inserting action links for the corresponding node.
*/

s.insertActionLinks = function(passage) {
    /*
    For each action in the node corresponding to the incoming passage,
    this function checks if the action should be displayed. If it passes
    the check, it adds a link for the corresponding action. Does nothing
    if the incoming passage does not correspond to a node.

    @param {SC passage object} passage - the incoming passage
    */
    var node = s.nodes.get(passage);
    if (node === undefined) {
        return;
    }

    var psgTitle = passage.title;
    var psgId = passage.domId;
    var action;
    for (var i = 0; i < node.length(); i++) {
        action = node.get(i);
        if (action.check()) {
            $('#' + psgId + '-actions').wiki(
                '<p style="text-align:' + action.getAlign() + '">' +
                    '<<link "' + action.getText() + '">>'+
                        '<<run s.nodes.get(Story.get("' + psgTitle + '"))' +
                        '.get(' + i + ').choose().carryOut()>>' +
                    '<</link>>' +
                '</p>'
            );
        }
    }
}

$(document).on(':passagedisplay', function (ev) {
    s.insertActionLinks(ev.passage);
});
/* twine-user-script #8: "9000-main.js" */
s.makeLink('Start', 'begin', 'intro').setAlign('center');
s.makeLink('intro', 'continue', 'RNG warning');
s.makeLink('RNG warning', 'got it', 'who you are');
s.makeLink('who you are', 'take a look around', 'bedroom');

s.searchBody = new s.Action(
    'search the body',
    function() {
        return !v.body.searched;
    }
).push(new s.Outcome(function() {
    v.body.searched = true;
    v.textSubs = [
        '',

        'As you bend down to take a closer look at the body, the bedroom ' +
        'door bursts open. ' 
    ];
    s.copsBustIn.load();
}));

s.getNode('bedroom').push(s.searchBody);

s.copsBustIn = new s.Node('Cops bust in', 2, function() {
    v.detective.discovered = true;
    return;
});
/* twine-user-script #9: "Story JavaScript" */


:: StorySubtitle
Story Subtitle


:: StoryAuthor
Story Author


:: StoryBanner
Story Banner


:: StoryCaption
Story Caption


:: StoryMenu
<<link 'menu item 1'>><</link>>
<<link 'menu item 2'>><</link>>


:: StoryInit
<<set $pounding = true>>
<<set $crowbar = false>>
<<set $knowledge = new Set()>>
<<set $containedIn = new Map()>>
<<run $containedIn.set("knife", "bedroom")>>
<<set $body = {
    searched: false
}>>
<<set $detective = {
    discovered: false
}>>
<<set $inventory = new Set()>>


:: Start
<div style='text-align:center'>
    <h1><<= Story.title>></h1>
    by<br>
    <<= Story.get('StoryAuthor').text>><br>
    <br>
    <br>
    <br>
</div>


:: intro
<p>It started with one shot of whiskey. Of course, most nights started with one shot of whiskey. Then one became two and two became more. Before long, you were making a fool of yourself. At least you assume you were. You can't remember.</p>

<p>That was last night. This morning, you wake up alone on a strange bed in a house you've never seen before. From the trash and bottles lying around, this had to be the scene of some after-party. But where is everyone? And what is that smell? It's then you realize your clothes are covered in blood.</p>

<p>When you get out of the bed, you see it. The body. A man lying on his back, dead, with a knife sticking out of his chest. Before you can do or think anything, someone starts pounding on the front door. Is it the police? Is it the murderer? Are //you// the murderer?</p>


:: RNG warning
<p>In this story, your choices can have random consequences. The chances of the various outcomes are affected by your character's traits. You can read about those traits on the Character Sheet. The Character Sheet also shows what you are carrying, what you have learned, and any injuries you may have suffered.</p>


:: who you are
<p>Scott Allen Brady. Scotty, to your friends. That's your name. You have to remind yourself, just to make sure you haven't forgotten //everything//. The last thing you remember is leaving work. You'd finished packing the motherboards into their shipping crates. Then you clocked out and left the plant. You were still wearing your Hewlett-Packard shirt when you got in your truck. You met some friends at the bar. Then...</p>

<p>Nothing. You can't remember. Now here you are, in some surreal nightmare, looking at a dead guy. The pounding on the door makes it hard to concentrate.</p>


:: bedroom
<p>You are in what has to be the master bedroom. You reek of alcohol, your mouth is dry and tastes like vomit, and your head is throbbing. There's blood on your clothes, in your hair, and on your face and hands. You've had better days.</p>

<p>You're wearing a white T-shirt with the Seattle Seahawks logo on the front. But you can hardly see the logo under all the blood. Your jeans are also caked with dried blood.</p>

<p>On your left, the {bedroom door|A} is closed. <<if $pounding>>You can hear the pounding on the front door coming from that direction. <<elseif $crowbar>>Outside the bedroom, <<if $knowledge.has("policeAtDoor")>>the police are<<else>>someone is<</if>> breaking into the house with a crowbar. <</if>>To your right, the {door|B} to the adjoining bathroom is ajar. On the floor is a {dead man|C}, lying on his back in a pool of blood. <<if $containedIn.get("knife") == "bedroom">>What looks like a heavy-duty {chef's knife|D} is sticking out of his chest.<</if>></p>

{?A|<p>The bedroom door is white, like the walls of the room. Blood is spattered on the left side near the door handle.</p>}

{?B|<p>The bathroom door is made of cheap plywood and won't even close all the way.</p>}

{?C|<p>You've never seen the dead man before, as far as you can remember. He must be in his mid-thirties.</p>}

{?D|<p>The murder weapon looks like the kind of knife they have hanging on the wall in a restaurant kitchen--the kind they use to cut meat or chop big vegetables. It has a wide blade and is about a foot long.</p>}


:: Cops bust in
<p>{0}</p>

<p>{1}Three men rush in. "Get down on the ground!" one shouts. <<if $inventory.has("knife")>>"He's got a knife!" yells another.<</if>> They all have their guns trained on you. The bald man in the center looks like a police {detective|A}. The other two are uniformed cops.</p>

{?A|The detective doesn't move. He doesn't blink. He just stands there scowling, waiting for you to make a move.}


